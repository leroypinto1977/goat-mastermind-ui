// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                 String    @id @default(cuid())
  userId             String    @map("user_id")
  type               String
  provider           String
  providerAccountId  String    @map("provider_account_id")
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?   @db.Text
  session_state      String?
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  deviceInfo   String?  @map("device_info")
  ipAddress    String?  @map("ip_address")
  lastActive   DateTime @default(now()) @map("last_active")

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Custom models for our authentication system
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  name          String?
  password      String?
  role          Role      @default(USER)
  status        UserStatus @default(ACTIVE)
  isFirstLogin  Boolean   @default(true) @map("is_first_login")
  lastLoginAt   DateTime? @map("last_login_at")
  createdBy     String?   @map("created_by_id")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  accounts      Account[]
  sessions      Session[]
  devices       Device[]
  auditLogs     AuditLog[]
  createdByUser User?     @relation("UserCreator", fields: [createdBy], references: [id])
  createdUsers  User[]    @relation("UserCreator")

  @@map("users")
}

model Device {
  id            String    @id @default(cuid())
  userId        String    @map("user_id")
  deviceName    String?   @map("device_name")
  deviceType    String?   @map("device_type")
  browser       String?
  os            String?
  ipAddress     String?   @map("ip_address")
  fingerprint   String    @unique
  isActive      Boolean   @default(true) @map("is_active")
  lastActive    DateTime  @default(now()) @map("last_active")
  createdAt     DateTime  @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("devices")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?  @map("user_id")
  action    String
  details   Json?
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  createdAt DateTime @default(now()) @map("created_at")

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}

model PasswordReset {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  token     String   @unique
  expires   DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  @@map("password_resets")
}

enum Role {
  USER
  ADMIN
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  PENDING_PASSWORD_RESET
}
